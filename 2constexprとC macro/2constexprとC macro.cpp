#include <iostream>

int main()
{
	using namespace std;
	{
		// C++ には似たような機能で constexpr がある

		const int a = 2;
		constexpr int b = 2;

		cout << a << ';' << b << endl;

		// 一見どちらも同じように見えるが constexpr は、コンパイル時に評価される
		// どういうことかというと、コンパイルしたあとは
		// cout << a << ';' << 2 << endl;
		// の状態になっているということ

		// なのでメモリーをつかわない！！
		// 圧倒的 const の上位互換！！
	}

	// ----------------------------------------------------------------------------------

	{
		// 昔の C では、おんなじことをpreprocessor macro(プリプロセッサ マクロ)で行っていた
#define a 2
		cout << a << endl;
		// これはただ単に文字列の置き換えに過ぎない
		// // こちらも、コンパイルしたあとは
		// cout << 2 << endl;

		// 例えばこんなこともできる
#define print cout << 2 << endl
		print;
	}

	// -------------------------------------------------------------------------------------------------

	{
		// macro と constexpr 何が違うか!　　　ついでに const も！



		// macro は文字の置き換えなので最適しにくいことや、
		// 例えば、重力の定数として使いたいとき                            出典 : https://trivial-information.com/physics-gravity

		/* macro */
#define G_macro (6.674 * 5.972 * pow(10, 24 - 11) / pow(6371, 2))
		double b = (G_macro * G_macro + 20) / G_macro;// 大げさだがこれをコンパイルすると ((6.674 * 5.972 * pow(10, 24 - 11) / pow(6371, 2)) * (6.674 * 5.972 * pow(10, 24 - 11) / pow(6371, 2)) + 20) / (6.674 * 5.972 * pow(10, 24 - 11) / pow(6371, 2))
		// となり実行時にはこの長い計算全てが行われる
		// 実行時には(6.674 * 5.972 * pow(10, 24 - 11) / pow(6371, 2))これが三回おこなわれる



		/* const */
		const double G_const = 6.674 * 5.972 * pow(10, 24 - 11) / pow(6371, 2);
		double c = (G_const * G_const + 20) / G_const;
		// これは実行時に初期化の一回しか(6.674 * 5.972 * pow(10, 24 - 11) / pow(6371, 2))が実行されないまだましなコード
		// 普通過ぎていうことがない



		/* constexpr */
		constexpr double G_constexpr = 6.674 * 5.972 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 / 6371 * 6371;
		double d = (G_constexpr * G_constexpr + 20) / G_constexpr;
		// これはコンパイル時に6.674 * 5.972 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 / 6371 * 6371が計算されて、実行時にはなんの負荷がない　！！！
		// が見るから異常 pow関数 が consterpr 関数(気力があったら解説する)じゃないから、使えないので * 10 を 13 個自力で並べた
		
		// これはもっと よくできて
		constexpr double d_constexpr = (G_constexpr * G_constexpr + 20) / G_constexpr;
		// c 自体を constexpr にすることで、さらに実行時の負荷軽減ができる

		// ---------------------------------------------------------------------------------------------------------------

		// 最後！途中から変数が b から始まっていることに気づいたかな？
		// なぜかっていうと
		/*
		int a = 20; // a がマクロなのでコンパイル後は int 2 = 20 となる .... あほくさ
		*/

		// ほかにも
#define G (6.674 * 5.972 * pow(10, 24 - 11) / pow(6371, 2))
		// もともと G があったのに、ほかの人が
#define G 100000
		// なんて書いたら計算ずれまくっちゃう
		int v = G * 5;

		// なのでマクロは絶対に使わないようにしよう
	}
}